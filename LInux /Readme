Команды в консоли
Каждая команда в консоли может состоять из нескольких частей:
● имя запускаемой команды или утилиты
● параметры запуска — опции, аргументы
● механизмы взаимодействия — перенаправление или каналы
ls /var/log
ls -l /var/log
ls -l --all /var/log
ls -la /var/log > result
ls -la /var/log | grep ‘suricata’


Автодополнение
Набирать текст команд полностью — прямой путь к подобным ошибкам:
Достаточно ввести несколько символов и пару раз нажать клавишу Tab,
чтобы произошло автодополнение команды, имени директории или файла:
$ ec█<Tab><Tab>
$ echo █
Если вхождений несколько, вместо полного дополнения будут предложены варианты:
$ cd /etc/sysc█<Tab><Tab>
$ cd /etc/sysctl.█
sysctl.conf sysctl.d/
command not found
no such file or directory

Запуск эмулятора терминала
● Без графической среды: не требуется — система сразу загружается
в текстовую консоль
● В графической среде: можно использовать меню или горячие клавиши.
Например, Ctrl + Alt + T в GNOME — среде по умолчанию во многих
дистрибутивах
Горячие клавиши
● Остановить выполнение текущей команды: Сtrl + C
● Очистить экран: Ctrl + L (или команда clear)
● Выход из консоли: Ctrl + D (команда exit)

История команд
История команд: history
Сtrl + R, слово для поиска
1
2
Стрелки вверх и вниз дают возможность
путешествовать по истории команд

Работа с текстовыми файлами
● Вывести строку text на экран: echo text
● Вывести содержимое файла filename: cat filename
● Постраничный просмотр файла filename: less filename
● Редактировать файл filename в терминале: nano filename
● Редактировать файл filename в GUI: gedit filename
● Показать последние 10 строк файла filename: tail filename
● Поиск подстроки строка в файле filename: grep строка filename

Текстовые редакторы Vim и Nano
Nano — простой в освоении и управлении текстовый редактор, отображает
горячие клавиши во время правки и управляется привычным образом
Vim — модальный текстовый редактор. Мощный инструмент, но может
быть непростым в освоении. Имеет несколько режимов работы:
Vi — более компактный и менее производительный предшественник
Vim — входит в стандартную поставку любого дистрибутива Linux
● нормальный для навигации по тексту
● визуальный для выделения текста
● вставки для ввода текста

Командная строка: перенаправление и конвейер
Потоки ввода-вывода:
sort < file.txt перенаправит файл file.txt в stdin команды sort
ls > file.txt перенаправит stdout команды ls в файл file.txt
ls 2> file.txt перенаправит stderr команды ls в файл file.txt
>> допишет в файл новые строки, в то время как > перезапишет его
ls | sort отправит stdout команды ls в stdin команды sort
● stdin — стандартный поток ввода
● stdout — стандартный поток вывода
● stderr — стандартный поток ошибок


Пакетный менеджер APT
APT — команда для управления пакетами (установленными программами)
в некоторых дистрибутивах ОС Linux (например, Ubuntu и Kali Linux).
Операция управления пакетами требует записи в защищённые директории
файловой системы, поэтому требует повышения привилегий (sudo).
Репозитории можно сравнить с Google Play Store или App Store,
но поддерживаются они в рамках дистрибутивов и содержат не только
программы, но и отдельные библиотеки, документацию, конфигурацию и прочие
необходимые для работы программ компоненты

Использование APT
● sudo apt update — обновление индекса пакетов: скачивание информации
из репозитория о имеющихся версиях
● sudo apt upgrade — обновление самих пакетов
● sudo apt install package — установка пакета с названием package
● sudo apt remove package — удаление пакета package из системы
● sudo apt autoremove — удаление неиспользуемых зависимостей

Выключение и перезагрузка
Выключение: systemctl poweroff — аналог устаревшего shutdown -P now
Перезагрузка: systemctl reboot — аналог устаревшего shutdown -r now

ОС Linux: пользователи
Пользователь — тот, от имени кого запускаются процессы. Не все пользователи
используются для входа в систему
Права доступа — атрибуты файла, обозначающие, что могут делать с ним
пользователь, группа и все остальные
Группы пользователей — способ объединения пользователей для выдачи
общего доступа
Показать имя текущего пользователя: whoami
Вывести подробную информацию о пользователе username: id username

Пользователи объединяются в группы (например, маркетинг), и права доступа
могут выдаваться не конкретным пользователям, а группам.
Владельцем нового файла по умолчанию будет тот, кто создал файл или каталог,
а также группа, к которой принадлежит сам владелец.
Посмотреть список групп пользователя username:
groups username
id username

ОС Linux: su\sudo
Root — имя суперпользователя (администратора). Разрешать от имени root вход
в систему не принято, вместо этого используют другие инструменты.
Для выполнения команд, требующих повышенных привилегии, следует ставить
перед командой команду sudo. В этом случае нужно использовать пароль своего
пользователя. Можно также получить доступ к командной строке пользователя
root: sudo -i.
Переключиться на другого пользователя можно с помощью команды su -.
В этом случае потребуется пароль пользователя root

Файловая система:
FHS
FHS (Filesystem Hierarchy Standard — стандарт иерархии файловой системы) —
унифицированное расположение (стандарт) основных файлов и каталогов в Unix-
системах.

/bin, /usr/bin, /sbin, /usr/sbin — исполняемые
файлы (программы)
/boot — файлы загрузчика
/dev — представление устройств в виде файлов
/etc — конфигурационные файлы
/home/linus — домашний каталог
пользователя linus
FHS
/root — домашний каталог пользователя root
/lib, /usr/lib — библиотеки и модули ядра
/tmp — каталог для временных файлов
(очищается после перезагрузки)
/var — каталог для изменяющихся файлов:
логи, базы данных и т. д.
/usr/local, /opt — каталоги для программ,
которые устанавливаются вручную

Путь и перемещение по файловой системе
Перемещение по каталогам: cd
Разделитель: /
cd /home/user/Desktop
Абсолютный путь (начинается от корня файловой системы):
cd Desktop
Относительный путь (начинается в текущем каталоге):
Важно: регистр имеет значение

Путь и перемещение по файловой системе
Если в имени присутствуют пробелы или другие служебные символы (\, !, ?, ;, *), то
их нужно экранировать — заключать в кавычки или ставить перед ними обратный
слеш \:
cd "my Desktop"
mkdir my\ new\ directory

Просмотр содержимого каталога
Просмотр каталога: ls
Просмотр атрибутов файлов: ls -l
Просмотр всех файлов, включая скрытые: ls -a
Опции можно комбинировать:
● просмотр атрибутов директории, а не её содержимого: ls -ld
● просмотр с отображением человекочитаемого размера: ls -lh

Специальные каталоги
. — указывает на текущий каталог,
в котором сейчас “находится” процесс командной строки
.. — указывает на родительский каталог (на уровень выше)
То есть cd .. переместит вас на уровень выше,
а ls -l . покажет содержимое текущего каталога

Создание каталога, удаление файлов и каталогов
mkdir path1 ...
Создание:
rm [-r][-f] path1 ...
Удаление:
● -r — рекурсивно (т. е. все вложенные файлы и каталоги)
● -f — без подтверждения
rmdir [-p] path1 ... — удаляет только пустые каталоги
-p (parents) — удаляет дерево каталогов

Копирование и переименование
cp <исходный_путь> <конечный_путь>
Копирование файла:
cp -r <исходный_путь> <конечный_путь>
Копирование каталога со всем его содержимым (рекурсивно):
mv <исходный_путь> <конечный_путь>
Переименование:
! Важно: <конечный_путь> может быть каталогом, а <исходный_путь>
может быть несколько

Параметры монтирования:
● тип ФС: ntfs, ext3, ext4
● режим ввода-вывода: ro, rw
● точка монтирования: /mnt, /media
Монтирование
Монтирование (mount) — процесс подготовки раздела диска к
использованию в ОС.

Типы файлов
● Обычные файлы
● Каталоги
● Файлы символьных устройств
● Файлы блочных устройств
● Сокеты (локальные)
● Каналы
● Ссылки

Атрибуты файла
● Режим (вид) файла: (файл) -,
каталог d, ссылка l и т. д.
● Права пользователя: чтение
r, запись w, исполнение x,
отсутствует - и др.
● Права группы
● Права «всех других»

chmod +x
chmod +x <file>
В ОС Linux при создании файла атрибут исполнения по умолчанию отсутствует.
Чтобы такой файл можно было запускать как программу, нужно выставить
соответствующий атрибут:

Процесс
Процесс — программа во время выполнения или сущность, представляющая
понятие активности/работы с точки зрения ОС

Процесс
Основные ресурсы процесса:
● память
● процессорное время
● оборудование (устройства ввода-вывода)
PID (Process IDentifier) — уникальный идентификатор процесса в ОС

Утилита ps
Утилита ps позволяет просмотреть
запущенные процессы:
ps -a

ps: поля
● PID — идентификатор процесса
● TTY — устройство (консоль), на котором запущен процесс
● STAT — статус процесса
● TIME — количество времени CPU, использованное процессом
● COMMAND — команда запуска

ps: основные параметры
ps x — процессы, запущенные текущим пользователем
ps ax — все процессы в системе
ps u — детализированный вывод
ps aux | grep bash — найти подстроку bash среди списка всех
запущенных процессов

kill
kill -l
killall nano
sudo pkill -u user2

kill
kill <pid>
kill -<имя_сигнала>
kill -s <имя_сигнала>
● KILL — завершает процесс на уровне ядра, не блокируется
● INT — запрос на завершение текущей операции (Ctrl + C)
● TERM — запрос на завершение программы

ip
ip — современный способ настройки сети

NetworkManager
NetworkManager — сервис,
предназначенный для управления
конфигурацией сетевых интерфейсов.
Сопровождается текстовыми
и графическими интерфейсами.
Является стандартным для многих
современных дистрибутивов,
в том числе Red Hat.
Доступен в графической среде, а также
в текстовых интерфейсах nmtui и nmcli

Настройка DNS в виртуальной машине
В некоторых случаях при работе в виртуальной машине может возникнуть
ситуация, когда сайты недоступны по имени, но доступны по IP-адресу.
Например, такая ситуация случается, когда адрес гостевой ОС совпадает с
адресом роутера, через который вы подключаетесь к интернету.
Решением проблемы может быть указание внешнего DNS-сервера вручную:
● 77.88.8.8 — Yandex
● 77.88.8.1 — Yandex
● 8.8.8.8 — Google
● 8.8.4.4 — Google

Репозиторий — хранилище данных, в этом случае
пакетов ПО
Менеджер пакетов — специальное программное
обеспечение, которое управляет загрузкой, установкой,
удалением пакетов, а также решением зависимостей

Репозитории и менеджеры пакетов
Популярные менеджеры пакетов:
● APT (семейство Debian)
● YUM (семейство Red Hat)

Пакет программного обеспечения
Пакет — это архив специального формата, который содержит:
● все необходимые приложению бинарные и конфигурационные файлы
● информацию о том, как их следует разместить в файловой системе
● данные о зависимостях пакета
● список действий, которые необходимо выполнить в процессе установки
Метапакет — пакет ПО, включающий в себя группу пакетов, объединённую
по какому-то признаку

Зависимости — это дополнительные пакеты,
необходимые для работы приложения, которое
устанавливается из пакетов

Зависимости
Для работы практически любой объёмной программы требуются дополнительные
библиотеки и компоненты.
Современные пакетные менеджеры решают эту проблему благодаря описанию
зависимостей в пакете, но так было не всегда

Сторонние репозитории
Иногда крупные разработчики программного обеспечения (яркий пример — PHP)
не хотят выкладывать свои приложения в базовые репозитории того или иного
дистрибутива. Вместо этого они организовывают собственные репозитории,
в которых хранят пакеты, доступные для установки на разные дистрибутивы Linux.
Такие репозитории называют сторонними.
Также зачастую сторонние репозитории организовывают разработчики
проприетарного ПО

Подключение сторонних репозиториев
Чтобы иметь возможность устанавливать ПО из сторонних репозиториев,
их необходимо указать в source.list вашего пакетного менеджера и скачать GPG-
ключ для него

Подключение сторонних репозиториев
История протокола IP

sudo apt install apt-transport-https lsb-release ca-certificates

Разберём на примере Debian и PHP.
Скачаем GPG-ключ

sudo wget -O /etc/apt/trusted.gpg.d/php.gpg
https://packages.sury.org/php/apt.gpg

Добавим адрес репозитория в source.list

sudo sh -c 'echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" >
/etc/apt/sources.list.d/php.list'

Команда make
Для сборки нам понадобятся:
● Компиляторы, которые прописаны в зависимостях пакета build-essential,
так что достаточно установить его со всеми зависимостями
● Autoconf и automake
● Файл configure, необходимый для процесса сборки. Если его нет,
выполните ./bootstrap или ./autogen.sh

Сборка пакета
checkinstall — программа для сборки deb-пакета дистрибутива Ubuntu.
Использование этой программы не всегда работает из-за отсутствия описания
в исходниках у некоторых программ
dpkg-deb --build — более надёжный вариант создания пакета в дистрибутиве Debian
rpmbuild — программа для сборки RPM-пакета

Сборка пакета
Чтобы создать пакет, необходимо иметь готовый spec-файл (control для deb),
который содержит пакет, его зависимости, имя, описание и так далее.
Собранный пакет дальше устанавливается при помощи менеджера пакетов

Пример сборки пакета на Debian
Скачайте исходные файлы приложения 
Создайте файл, описывающий пакет: spec для RPM, control для deb 

Выполните

dpkg-deb --build <source_dir>
Установите получившийся пакет при помощи пакетного менеджера4
Удобнее это сделать, поднявшись на уровень выше в иерархии каталогов

APT (advanced packaging tool) — программа
для установки, обновления и удаления программных
пакетов в Debian и операционных системах,
основанных на нём: Ubuntu, Linux Mint и т. п.

Пакетный менеджер APT
APT способен автоматически устанавливать и настраивать программы для Unix-
подобных операционных систем из предварительно откомпилированных пакетов и
исходных кодов

Синтаксис построения команды
apt install -y vim
Пример:
где:
● apt — пакетный менеджер
● install — выполняемое действие
● -y — ключ команды
● vim — цель этой команды

Обновление пакетов
Обновление списка пакетов: apt update — необходимо для получения последней
информации о хранящихся в репозитории пакетах
Обновление пакетов: apt upgrade — обновляет все установленные в системе
пакеты до актуальных версий

apt search <pattern> — полнотекстовый поиск в репозитории по паттерну
apt show <packet_name> — показывает информацию о пакете (пакетах)
apt list — выводит список пакетов в зависимости от ключа:

Информация о пакетах
● --installed — установленных
● --upgradeable — доступных к обновлению
● --all-versions — всех доступных

apt search <pattern> — полнотекстовый поиск в репозитории по паттерну
apt show <packet_name> — показывает информацию о пакете (пакетах)
apt list — выводит список пакетов в зависимости от ключа:

Информация о пакетах
● --installed — установленных
● --upgradeable — доступных к обновлению
● --all-versions — всех доступных

Полезные команды
● apt autoremove — удаляет неиспользуемые пакеты, например
старые версии ядра
● apt -f install — попробует починить поломанную установку пакета,
например неудовлетворённые зависимости

YUM (yellowdog updater modified) — открытый
консольный менеджер пакетов для дистрибутивов
Linux, основанных на пакетах формата RPM: Red Hat,
CentOS, Fedora, Oracle Linux

Пакетный менеджер YUM
Как и APT, менеджер YUM работает с репозиториями пакетов от производителя
дистрибутива или сторонних авторов и способен автоматически устанавливать и
настраивать программы

Синтаксис построения команды
Синтаксис команды стандартно включает в себя:
● обращение к менеджеру
● действие
● ключи (опции)
● цель или объект команд

Синтаксис построения команды
yum install -y vim
Пример:
где:
● yum — пакетный менеджер
● install — выполняемое действие
● -y — ключ команды
● vim — цель этой команды
Как видите, синтаксис очень похож на APT

Обновление пакетов
Есть и отличия:
● yum update — обновляет все пакеты в системе, перед этим выполняя обновление
списка пакетов в репозитории
● yum update <packet_name> — обновляет только выбранный пакет
● yum downgrade <packet_name> — откатывает пакет к предыдущей версии

yum search <pattern> — полнотекстовый поиск в репозитории по паттерну
yum list — выводит список пакетов в зависимости от ключа:
Информация о пакетах
● installed — установленных
● available — всех доступных пакетов
● all — всех доступных и установленных пакетов

Установка и удаление пакета из репозитория
● yum install <packet_name> — устанавливает в систему пакет программного
обеспечения, по возможности разрешая зависимости
● yum remove <packet_name> — удаляет файлы приложения из системы,
но оставляет пользовательские файлы с настройками
● yum reinstall <packet_name> — переустанавливает приложение в системе

Полезные команды
● yum autoremove — идентичен применению в APT
● yum clean packages — удаляет пакеты из кеша

npm (node package manager) — пакетный
менеджер для Node.js, программной платформы
языка JavaScript

Пакетный менеджер npm
Используется в системах, работающих на Node.js, и позволяет быстро
оперировать пакетами этого фреймворка.
npm устанавливается вместе с node.
Чаще всего необходимости устанавливать его отдельно нет. Если же
такая ситуация возникает, используйте:
curl https://npmjs.org/install.sh | sh

Поиск и получение информации о пакете
● npm search <pattern> — поиск пакетов в базе данных репозитория.
Ищет как по названию, так и по описанию пакета
● npm view <pattern> — просмотр информации о пакете

Установка и удаление пакетов
● npm install <package_name> — установка пакета локально
Обратите внимание, в таком виде пакеты будут устанавливаться в current work
directory, то есть в текущую рабочую директорию
Если необходимо установить пакет глобально, воспользуйтесь ключом -g
● npm uninstall <package_name> — удаление локально установленного пакета
Для удаления глобально установленного пакета воспользуйтесь ключом -g

Pip — пакетный менеджер языка Python,
на нём же и написанный

Пакетный менеджер pip
Версии Python, начиная с 2.7.9 и 3.4, содержат пакет pip по умолчанию*.
Если pip отсутствует, то его можно установить, скачав с официального сайта:
curl https://bootstrap.pypa.io/get-pip.py | python**

* Или pip3 для Python 3, если одновременно установлен 2 и 3 Python
** Cкрипт установки написан на Python, и для его исполнения необходим установленный в системе Python

Поиск и получение информации о пакете
● pip search <pattern> — поиск пакетов в базе данных репозитория.
Ищет как по названию, так и по описанию пакета
● pip list — список установленных пакетов
● pip show <package_name> — показывает информацию о пакете

Установка и удаление пакетов
● pip install <package_name> — установка выбранного пакета
● pip uninstall <package_name> — удаление установленного пакета.
Пакеты устанавливаются глобально, для всей системы
● pip install -U — обновление пакетов

Gem — пакетный менеджер языка Ruby, созданный
для упрощения процесса создания, распространения
и установки библиотек

Пакетный менеджер Gem
С версии Ruby 1.9 RubyGems входит в стандартный пакет.
Если необходимо установить его вручную, воспользуйтесь инструкцией
из официальной справки

Поиск и получение информации о пакете
● gem search -r <pattern> — поиск пакетов в базе данных репозитория
Ключ -r определяет, что поиск будет произведён в репозитории.
Для локального поиска используйте ключ -l
● gem list — список установленных пакетов

Установка и удаление пакетов
● gem install <package_name> — установка выбранного пакета
● gem uninstall <package_name> — удаление установленного пакета.
Пакеты устанавливаются глобально, для всей системы
● gem update — обновление пакетов

init — специальный процесс (демон) управления
системой и службами

init
/sbin/init
Расположение:
Режимы работы init:
● однопользовательский — службы не запускаются
● многопользовательский — режим запуска по умолчанию
● сервер — аналогичен многопользовательскому, но без GUI

systemd
top
systemctl status

Модули systemd
Модуль (unit) — описывает запускаемую службу, устройство и т. п.
Каждый модуль описан в своём файле (unit file):
● /usr/lib/systemd/system/ — модули из пакетов (Nginx, Apache, MySQL)
● /run/systemd/system/ — модули, созданные во время работы ОС
● /etc/systemd/system/ — модули, созданные пользователем

Типы модулей
● Target — цели
● Service — службы
● Socket — сокеты
● Device — устройства
● Mount — точки монтирования
● Automount — точки монтирования
(по запросу)
● Swap — монтирование swap
● Path — отслеживает заданный путь
● Timer — проверяет таймер
● Snapshot — записывает состояние
модулей
● Slice — управление ресурсами
● Scope — управляет внешними
процессами
● busname — управляет DBus

● Модули служб — обычные службы ОС
● Модули монтирования — монтируют ФС
● Целевый модули/цели — группируют другие модули
Типы модулей
~$ systemd-analyze plot > test.svg
~$ sudo systemctl list-dependencies

Цель (target) — нужное состояние системы, ссылка на файл,
содержащий зависимости (службы).
Systemd запускает все зависимости из соответствующего target-файла.
Когда все зависимости будут запущены, система будет работать на
соответствующем target-уровне:
Цели systemd
systemctl get-default
graphical.target

Иерархия целей
man bootup

Просмотр всех служб:
Модули служб
systemctl --all -t service
Просмотр выбранной службы (ssh):
systemctl status sshd.service

● systemctl list-units — список модулей
● systemctl list-units --type=service — список модулей-служб
● systemctl status <модуль> — состояние выбранного модуля
● systemctl enable\disable <модуль> — разрешить/запретить модуль
● systemctl start\stop\restart <модуль> — запустить/остановить/... модуль
● systemctl daemon-reload — перезапуск конфигурации systemd
systemctl

Иногда требуется передать службе дополнительные параметры. Это можно
выполнить либо через файл:
Передача параметров в службу

sudo nano /etc/my.conf
param1 = -p1
param2 = -p2

Выполним изменения в unit-файле, раздел [service]:
Передача параметров в службу
EnvironmentFile=/etc/my.conf
ExecStart=/usr/bin/test_service $param1 $param2
Можно указать параметры без файла в разделе [service]:
ExecStart=/tmp/test.py $params

Шаблон — специальный unit-файл, позволяющий systemd работать с
несколькими экземплярами unit.
Чтобы вызвать шаблон, используют специальный формат:
<имя_службы>@<аргумент>.service
Пример:
Шаблоны служб
ExecStart=/usr/sbin/openvpn --daemon --writepid
/var/run/openvpn/%i.pid --cd /etc/openvpn/ --config %i.conf
Вызов:

sudo systemctl start openvpn@config1.service

Журнал — база данных, в которой хранятся сообщения ядра и служб,
начиная с загрузки и заканчивая завершением работы.
journalctl
Настройки журнала:
journalctl

nano /etc/systemd/journald.conf

● journalctl -u=sshd — сообщения для модуля ssh
● journalctl -b 0 -u ssh — сообщения для модуля ssh только в текущем сеансе
● journalctl --list-boots — загрузки
● journalctl -n 100 /usr/sbin/sshd — показать внешний лог
● journalctl --since=yesterday --until=now — временной период
journalctl

Root (superuser, суперпользователь) — обязательный
пользователь во всех ОС Linux.
Root может прочитать, удалить или изменить любой
файл в системе

Root
Для root:
UID = 0
GUID = 0
Домашний каталог = /root
В некоторых дистрибутивах пользователю root
запрещён вход в систему — например, в Ubuntu

Sudo — временное повышение прав текущего
пользователя до root

Sudo
/etc/sudoers — список пользователей или групп, которым разрешено
использовать sudo

Выполним:
UID
id

sudo id

Значение UID:
● 1–99 — системные пользователи
● 500+ — пользователи-люди, Red Hat
● 100–999 — пользователи-службы, стандарт
● 1 000–4 999 — пользователи-люди, стандарт
● 5 000–9 999 — дополнительные пользователи и группы, стандарт
● 5 000+ — пользователи-люди, последние рекомендации Red Hat
UID

Значение GUID:
● 100 — users
● GUID = UID
GUID
Для того чтобы предоставить доступ к общему ресурсу,
нужно создать отдельную группу специально
для этих целей и добавлять в неё пользователей

/etc/shadow — файл, содержащий список паролей пользователей.
/etc/shadow
Получить пароль подобного вида можно с помощью команды :
[test@vm-master ~]$ sudo cat /etc/shadow
root:!::0:99999:7:::
bin:*:18474:0:99999:7:::
...
tdcadmin:$6$O9JjR2kcLBy51yL9$vW9uYMrRci9nTxPdDWw81uDLXzssHaajjt6kIMRD7ofCHvN4auFYE6.aoff
BcVxDicuOiA7dqerAAab7EVjyb1::0:99999:7:::
awxadmin:$6$L2dRQX/T$ece7pdR9onRcpwzpI6D.6NNqev9zjUC1/5iLR35cY0/sSFu5bwWs7ArmYqpfjWWNqhH
vghtOE.OTY8z/k9ocY1:19395:0:99999:7:::
ferm:$6$nG8V/1CrBOGdYqH7$machY4uVN17w7LcpDRptaluhLHbSUv3cRNVL36cwjpX2.gEpj1wODr/BpQs6cPF
MyseWH2cPu6eDt0mXcDV78.:19395:0:99999:7:::
[test@vm-master ~]$ openssl passwd -6 moi_porol
$6$81WKRQNWhrZYeCdF$j.zVrENHEa.ES2OYp1aQ1yaqWhfkIZ6eRa2wpYy/0UGKmyz5Ztz.Fm.AE6IAnx2gsNDj
88A9n.BeM2HSRibUF/
Пользователь : пароль : дата: мин : макс : : :

Утилиты мониторинга производительности
● top — выводит список работающих в системе процессов и информацию о них
● atop — продвинутый интерактивный полноэкранный монитор
производительности
● mpstat — выводит статистику по процессору
● iostat — мониторит использования дисковых разделов
● pidstat — выводит статистику по процессам
● vmstat — выводит статистику процессора, памяти и о процессах
● lvm — инструмент для работы LVM
● mdraid — программа для работы с массивами дисков

Процесс программы
Процесс программы в ядре представляется
как структура со множеством полей:
● идентификатор процесса (pid)
● открытые файловые дескрипторы (fd)
● обработчики сигналов (signal handler)
● текущий рабочий каталог (cwd)
● переменные окружения (environ)
● код возврата

Жизненный цикл процесса
● После выполнения fork(2) процесс
переходит в состояние «Готов»
● Как только планировщик поставил
процесс на выполнение, началось
состояние «Выполняется»
● Некоторые системные вызовы могут
выполняться долго, например ввод-
вывод. В таких случаях процесс
переходит в состояние «Ожидает»
● В любой момент можно приостановить
выполнение процесса, отправив ему
сигнал SIGSTOP. Процесс перейдёт
в состояние «Остановлен» и будет
находиться там до тех пор, пока ему
не придёт сигнал продолжать работу
(SIGCONT) или умереть (SIGKILL)

%CPU
Чем выше показатель, тем больше он нагружает процессор.
Этот параметр влияет на всю систему.
Решение:
● читаем логи процесса
● увеличиваем приоритет
● убиваем его и перезапускаем

%MEM
Показатель демонстрирует, сколько оперативной памяти в этот момент
забирает процесс.
С уменьшением оперативной памяти информация начинает копироваться
на жёсткий диск в раздел подкачки и тем самым уменьшает время работы.
Утечка памяти может быть связана с ошибками в страницах памяти
или неправильной работой приложения.
Решение:
● логи
● kill pid
● restart

Load Average
Значения:
● меньше 1 — самое хорошее значение, нагрузки практически нет
● 1–3 — сервер достаточно нагружен работой, но эта нагрузка в пределах нормы
● 3–10 — серьёзная нагрузка, следует обратить внимание на процессы, HDD
и прочие параметры
● 10–20 — серьёзные проблемы, заметно торможение сервера
при обработке запросов
● 20 и более — очень серьёзные проблемы, доступ к серверу серьёзно затруднен

Утилита atop
apt install atop
yum install atop
Для установки программы atop для систем CentOS:
cd /usr/ports/sysutils/atop
make && make install && make install clean
Для установки программы atop для систем BSD:
Для установки программы atop для систем Debian:

Утилита atop
Утилита работает в интерактивном режиме, как утилита top.
Кроме этого, atop позволяет показывать загрузку по процессору, памяти,
дискам и сети

Утилита atop
Режимы работы утилиты Shift + команда:
● m — выстроит процессы по занятой памяти
● d — построит процессы по использованию диска
● n — выстроит процессы по использованию сети — доступно только
с установленным патчем
● v — покажет более подробную информацию о процессах: пользователя,
дату и время начала процесса
● u — выстроит таблицу по самым прожорливым пользователям

Утилита atop
Утилита по дефолту снимает показатели каждые 10 минут и сбрасывает их в лог
/var/log/atop-YYYYMMDD
Файл конфигураций находится: /etc/default/atop

Команда atopsar
Команда atopsar — это встроенный анализатор логов atop, который позволит
быстро найти проблему и смотреть лог в нужное вам время.
Основные ключи:
● b — с какого времени надо вывести лог
● e — до какого времени надо вывести лог
Поиск отдельных процессов:
● O — топ-3 процессов CPU
● G — топ-3 процессов RAM
● D — топ-3 процессов диска
● N — топ-3 процессов сети

Команда atopsar
Общая нагрузка:
● d — нагрузка на каждый диск отдельно
● m — нагрузка на оперативную память и SWAP
● с — нагрузка на процессор, отдельно по каждому ядру
● p — количество процессов и тредов
● w — нагрузка на IPv4
● W — ошибки на IPv4
● i — нагрузка на интерфейс

Команда atopsar
# atopsar -r /var/log/atop/atop_20120116 -b 09:35:01 -e 10:55:01 -m
atopsar -r /var/log/atop/atop_20120116 -i -b 00:40:00 -e 01:30:00
Нагрузка по сетевым интерфейсам:
atopsar -r /var/log/atop/atop_20120116 -d -b 01:10:00 -e 01:30:00
Нагрузка на диски:
Примеры команд:
Нагрузка на RAM с 09:35:01 до 10:55:01 28 января

Пакет sysstat
sysstat — это набор инструментов мониторинга производительности для Linux.
В состав пакета входят следующие утилиты:
● mpstat
● pidstat
● vmstat
● iostat
Сегодня рассмотрим mpstat и pidstat

Виды массивов
● RAID 0 — дисковый массив повышенной производительности с чередованием,
без отказоустойчивости
● RAID 1 — зеркальный дисковый массив
● RAID 2 — зарезервирован для массивов, которые применяют код Хэмминга
● RAID 3 и RAID 4 — дисковые массивы с чередованием и выделенным диском
чётности
● RAID 5 — дисковый массив с чередованием и отсутствием выделенного
диска чётности
● RAID 6 — дисковый массив с чередованием, использующий две контрольные
суммы, вычисляемые двумя независимыми способами
● RAID 10 — массив RAID 0, построенный из массивов RAID 1
● RAID 1E — зеркало из трёх устройств:
● RAID-Z — один избыточный диск
- RAID 50 — массив RAID 0 из массивов RAID 5
- RAID 05 — RAID 5 из RAID 0
- RAID 60 — RAID 0 из RAID 6 и различные другие

Утилита free
Выводит информацию об использовании оперативной памяти и о файле подкачки:
● used — использовано
● free — свободно
● shared — расширено с другими программами
● buff/cashed — буферизировано/кешировано
● available — доступно

Планировщик заданий
минуты часы день месяц день_недели имя_пользователя команда
Допустимые значения временных параметров:
Cron — планировщик заданий, используемый для планирования
выполнения команд на определённое время.
Запись crontab файла состоит из семи полей:
● минуты: 0–59
● часы: 0–23
● день_месяца: 1–31
● месяц: 1–12
● день_недели: 0–7, где 0 — воскресенье, 1 — понедельник, 2 — вторник, 3 — среда, 4 — четверг, 5 — пятница,
6 — суббота, 7 — воскресенье

Планировщик заданий
Для отображения содержимого crontab-файла текущего
пользователя используйте команду:
crontab -l
Для редактирования заданий пользователя:
crontab -e

Утилиты мониторинга производительности
Утилиты (службы) мониторинга производительности,
которые мы сегодня рассмотрим:
● iostat — мониторит использование дисковых разделов
● vmstat — выводит статистику процессора, памяти и информацию о процессах

Утилита iostat
Утилита, предназначенная для мониторинга использования дисковых разделов

Утилита iostat
Наиболее полезные ключи:
● -d — отображать только использование дисков
● -c — отобразить только использование CPU
● -j — отобразить имя раздела (ID, LABEL, PATH, UUID)
● -k — отобразить данные в килобайтах
● -m — отобразить данные в мегабайтах
● -p — отобразить статистику по указанному блочному устройству
● -t — отобразить время выполнения теста
● -x — отобразить расширенную статистику







