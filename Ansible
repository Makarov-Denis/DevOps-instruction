Ansible — система управления конфигурациями.
● Позволяет централизованно управлять ПО, ОС и их
настройками на Linux, Mac, Windows
● Написан на Python, открытый исходный код
● Разработчик — Red Hat

Особенности Ansible
Безагентный — для работы, настройки с управляемым узлом нет
необходимости ставить на управляемый узел агента. Необходимых
требований только два: работающий ssh-сервер, python версии 2.6
и выше
Идемпотентность — независимо от того, сколько раз вы будете
запускать playbook, результат (конфигурация управляемого узла)
всегда должен приводить к одному и тому же состоянию
Push-model — изменения конфигураций «заталкиваются» на управляемые узлы. Это может быть минусом

Основные термины Ansible
Узел управления — устройство с установленным и настроенным
Ansible. Может быть ваш ноутбук или специальный узел в сети
(подсети), выделенный для задач управления
Управляемые узлы — узлы, конфигурация которых выполняется
Файлы инвентаризации (inventory) — файл или файлы, в которых
перечислены управляемые узлы: *.ini, *.yaml или динамический
Модули (modules) отвечают за действия, которые выполняет Ansible,
другими словами, инструментарий Ansible

Основные термины Ansible
Задачи (tasks) — отдельный элемент работы, которую нужно
выполнить. Могут выполняться самостоятельно или в составе
плейбука
Плейбук (playbook) состоит из списка задач или других директив,
указывающих на то, какие действия и где будут производиться
Обработчики (handlers) — элемент, который служит для экономии
кода и способен перезапускать службу при его вызове
Роли (roles) — набор плейбуков и других файлов, которые
предназначены для выполнения какой-либо конечной задачи.
Также упрощают, сокращают код и делают его переносимым

Установка Ansible

Устанавливаем Ansible:

yum install ansible/apt install ansible

sudo apt-get install python-yaml python-jinja2 python-paramiko python-crypto

Правим при необходимости конфигурационный файл Ansible:

vim /etc/ansible/ansible.cfg

Правим файл inventory по умолчанию или создаём свой:

vim /etc/ansible/hosts

Смотрим версию и другие переменные запуска Ansible:

ansible --version

Инвентарный файл — это файл с описанием устройств, к которым
будет подключаться и управлять Ansible. Может быть в формате
INI или YAML, или быть динамически конфигурируемым какой-
либо вычислительной системой. Две группы по умолчанию: all и ungrouped

Команды:
ansible all -m ping --list-hosts — вывести список хостов
ansible-playbook --list-hosts — вывести список хостов для playbook

Ansible.cfg
Ansible.cfg — это основной конфигурационный файл. Может
храниться:
● ANSIBLE_CONFIG — переменная окружения
● ansible.cfg — в текущем каталоге
● ~/.ansible.cfg — в домашнем каталоге пользователя
● /etc/ansible/ansible.cfg — можно брать за образец для
внесения правок
24
ansible --version — покажет, какой конфигурационный файл будет
использоваться

Ansible.cfg
В конфигурационном файле можно задавать множество
параметров, например:
25
[defaults]
inventory = inventory.ini # расположение файла inventory
remote_user = ansible # пользователь, которым подключаемся по ssh
gathering = explicit # отключает сбор фактов
forks = 5 # количество хостов, на которых текущая задача выполняется одновременно
[privilege_escalation]
become = True # требуется повышение прав
become_user = root # пользователь, под которым будут выполняться задачи
become_method = sudo # способ повышения прав

Параметры
Большинство настроек также может задаваться или переопределять
во время выполнения команд через параметры
Примеры:
26
ansible -i hosts.ini all -m ping — вручную указывает файл инвентори
ansible all -m ping -e "ansible_user=vagrant
ansible_ssh_pass=vagrant" — вручную задаёт удалённого пользователя и пароль
ansible all -u vagrant -m ping — вручную задаёт удалённого пользователя
ansible web* -m ping — задаёт список хостов к выполнению через регулярные выражения

Ansible modules
Модули — это небольшая программа, входящая в поставку Ansible,
принимающая на вход значения и выполняющая работу на целевых
хостах. Фактически вся работа происходит с использованием
модулей. Можно самостоятельно писать модули и расширять
возможности Ansible
Примеры:

ansible-doc -l
ansible-doc shell
ansible all -m ping 

Ansible ad-hoc
Ad-hoc команды — это самый быстрый способ начать использовать
Ansible. Для запуска Ansible в режиме ad-hoc не нужно писать
плейбуки, достаточно помнить минимальный синтаксис
Примеры:
31
ansible all -m ping
ansible all -m command -a “cat /etc/hosts”

Часто используемые модули

Название модуля Какое действие выполняет
1 ping Позволяет проверить доступность хостов для работы через
Ansible
2 service Позволяет управлять работой служб (демонов) на хостах
3 command Позволяет запустить команду без использования окружения
4 copy Позволяет копировать файлы
5 lineinfile Позволяет заменять или добавлять строки в текстовых файлах
6 debug Позволяет выводить отладочные сообщения
7 git Позволяет работать с git-репозиториями

Playbook
Playbook — это основной рабочий скрипт. Он позволяет
объединять задачи (task), роли в одном файле и передавать их
для выполнения на определённые группы хостов
Пример запуска плейбука:
11
ansible-playbook myscript.yaml
Пример проверки синтаксиса плейбука:
ansible-playbook myscript.yaml --syntax-check

Role
Role — это набор файлов, задач, шаблонов, переменных и
обработчиков, которые объединены вместе в логическую
структуру и служат определённой цели
Например, настройка сервера времени. Роли можно подключать в
плейбуки. Роли удобно передавать коллегам, как целостную
сущность
Для интерактивной работы с ролями используется команда
ansible-galaxy

Преимущества использования ролей
● Можно использовать для нескольких проектов
● Удобно передавать
● Удобно отправить на внешние ресурсы
● Удобно управлять зависимостями

Структура ролей
● defaults — содержит переменные по умолчанию для роли,
которые должны быть легко перезаписаны
● vars — содержит стандартные переменные для роли, которые
не должны быть перезаписаны в вашей книге
● tasks — содержит набор задач, которые должна выполнять
роль
● handlers — содержит набор обработчиков, которые будут
использоваться в роли
● templates — содержит шаблоны Jinja2, которые будут
использоваться в роли

Структура ролей
● files — содержит статические файлы, необходимые из
ролевых задач
● tests — может содержать дополнительный файл инвентаря, а
также playbook test.yml, который можно использовать для
тестирования роли
● meta — содержит метаданные роли — информацию об авторе,
лицензию, зависимости и т. д.

Расположение ролей на файловой системе имеет значение
● ./roles — самый высокий приоритет
● ~/.ansible/roles
● /etc/ansible/roles
● /usr/share/ansible/roles — самый низкий приоритет

 Galaxy
Ansible-galaxy — это сайт, который является публичным
репозиторием для ansible-ролей, написанных сообществом. Т. е. на нём можно искать, использовать и выкладывать роли
Примеры:

ansible-galaxy role list
ansible-galaxy role init myrole
ansible-galaxy role search nginx
ansible-galaxy role install nginx
ansible-galaxy role remove nginx

Tags
Теги служат, чтобы помечать определённые задачи (task) внутри плейбука или роли и вызывать либо наоборот пропускать только
их, не заставляя выполняться весь плейбук

ansible-playbook -i hosts.ini --tags prod playbook.yml
ansible-playbook -i hosts.ini --skip-tags prod playbook.yml

Handlers
Handlers — это специальные задачи. Они вызываются из других
задач ключевым словом notify. Служат для сокращения кода

---
- name: handlers example
hosts: all
become: yes
tasks:
- name: Change ssh config
lineinfile:
path: /etc/ssh/sshd_config
regexp: '^PasswordAuthentication'
line: PasswordAuthentication yes
notify:
- Restart sshd
handlers:
- name: Restart sshd
service:
name: sshd
state: restarted

Условие when
За счёт конструкции when можно выполнять задачу из плейбука
только при выполнении какого-либо условия

tasks:
- name: Configure SELinux to start mysql on any port
ansible.posix.seboolean:
name: mysql_connect_any
state: true
persistent: yes
when: ansible_selinux.status == "enabled"

Jinja2
С помощью механизма шаблонов Jinja2 можно динамически
создавать, например, конфигурационные файлы. Для работы с
шаблонами Jinja2 используется модуль template. Пример
использования:

cat index.j2
A message from {{ inventory_hostname }}
- name: Create index.html using Jinja2
template:
src: index.j2
dest: /var/www/html/index.html

Пример задания тегов
Пример task с использованием тегов:
- name: tag usage example
shell: /bin/echo "Only running because of specified tag"
tags: mytag

Vars
В Ansible существует 22 способа задавать переменные. С их
помощью можно реализовывать логику работы скрипта
В документации описано, какой приоритет имеет тот или иной
способ задания переменных

Special variables
В Ansible есть встроенные переменные. Их имена нельзя
переназначать, но использование встроенных переменных может
быть очень полезно
Пример:

ansible_play_hosts_all — вернёт список хостов из inventory файла

Ansible-vault
Чтобы не хранить пароли в открытом виде, в Ansible существует
vault — шифрованное хранилище паролей
Ansible-vault — утилита, которая позволяет работать с таким
хранилищем
Пример команд для работы с ansible-vault:
34
ansible-vault create file2.yml
ansible-vault decrypt file2.yml
ansible-vault encrypt file2.yml
ansible-vault rekey file2.yml

Molecule
Molecule — это фреймворк для тестирования Ansible ролей. В
конфигурационных файлах Molecule описывается
инфраструктура и тесты, которыми покрывается роль
Что позволяет сделать:
● проверять синтаксис
● поднимать тестовую инфраструктуру
● писать тесты вручную
● скачивать роли из Galaxy







